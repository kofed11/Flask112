import logging
import openai
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile

# –£—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–∏ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = "7153775434:AAHst-m5O8kHtKzjFMM6u2VfMOD-hM5vX_o"
OPENAI_API_KEY = "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"
openai.api_key = OPENAI_API_KEY

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_contexts = {}

# –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Python –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
SYSTEM_MESSAGE = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ Python, HTML, CSS –∏ JavaScript. "
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥, –Ω–∞–π–¥–∏ –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤—å –∫–æ–¥, "
        "—á—Ç–æ–±—ã –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º."
    )
}

# –õ–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
HISTORY_LIMIT = 100

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = {".py", ".html", ".css", ".js"}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
def is_valid_extension(file_name):
    return any(file_name.endswith(ext) for ext in ALLOWED_EXTENSIONS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def chatgpt_response(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, —Å–æ–∑–¥–∞–µ–º –µ—ë
    if user_id not in user_contexts:
        user_contexts[user_id] = [SYSTEM_MESSAGE]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_contexts[user_id].append({"role": "user", "content": message.text})

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        client = openai.OpenAI(api_key=OPENAI_API_KEY)

        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=user_contexts[user_id]
        )
        reply_text = response["choices"][0]["message"]["content"]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_contexts[user_id].append({"role": "assistant", "content": reply_text})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(user_contexts[user_id]) > HISTORY_LIMIT:
            user_contexts[user_id] = [SYSTEM_MESSAGE] + user_contexts[user_id][-HISTORY_LIMIT:]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        reply_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.answer(reply_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@dp.message(lambda message: message.document)
async def handle_document(message: types.Message):
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if not is_valid_extension(document.file_name):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º Python (.py), HTML (.html), CSS (.css) –∏–ª–∏ JavaScript (.js).")
        return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ 50MB)
    if document.file_size > 50 * 1024 * 1024:
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 50MB.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = os.path.join(UPLOAD_DIR, document.file_name)
    await bot.download(document, file_path)

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            code_content = file.read()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∫–æ–¥–∞
        if document.file_name.endswith(".py"):
            language = "Python"
        elif document.file_name.endswith(".html"):
            language = "HTML"
        elif document.file_name.endswith(".css"):
            language = "CSS"
        elif document.file_name.endswith(".js"):
            language = "JavaScript"
        else:
            language = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ ChatGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[
                SYSTEM_MESSAGE, {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ ({language}), –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π:\n\n{code_content}"}
            ]
        )
        fixed_code = response["choices"][0]["message"]["content"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        fixed_file_path = os.path.join(UPLOAD_DIR, f"fixed_{document.file_name}")
        with open(fixed_file_path, "w", encoding="utf-8") as file:
            file.write(fixed_code)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await message.answer(f"üìÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ ({language}) –≤ {document.file_name} –≥–æ—Ç–æ–≤! üîß")
    await message.answer_document(FSInputFile(fixed_file_path))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
